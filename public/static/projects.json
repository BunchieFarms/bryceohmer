{
    "Projects": [
        {
            "title": "Weathered",
            "image": "static/weathered.JPG",
            "imageAlt": "Weathered",
            "links": [
                {
                    "label": "Visit",
                    "url": "http://weathered.bryceohmer.com"
                },
                {
                    "label": "GitHub",
                    "url": "https://github.com/BunchieFarms/Weathered"
                }
            ],
            "content": [
                {
                    "sectionHeader": "Why?",
                    "text": [
                        "Sometimes, when I want to go mountain biking, the trail is out of town. Oftentimes, trails are closed when it has rained recently and the trails are wet. So, I want to know what the weather was like recently in that area so I can determine if the trail will be good to ride.",
                        "However, it is somewhat difficult to find accurate historical weather!",
                        "Why is it is challenging to get recent actual weather?",
                        "A few years ago, I wanted to make this app. I was using a weather API that would give me the current weather in any location. So, in order to not go over my usage limits, I only had a couple locations that I would search for.",
                        "Every 30 minutes, my script would call this API and record the current weather. If it was raining, it would tell me so, so at the end of every day I could add all the rainfall up and get a total rainfall for the day.",
                        "But I started noticing that the past day's weather would not reflect reality! How could this be?",
                        "Apparently, what I was actually requesting was a time interval's FORECAST, not the actual data. I searched and searched, but I could not find a weather data API that fit all my needs.",
                        "I became interested in this project again in December 2023, when a friend wanted to go mountain biking, but we didn't know if it had rained at that location recently, which would close the trail.",
                        "During research, I learned that the reason I couldn't find what I was looking for was because of how this weather data works.",
                        "Weather data comes from STATIONS, and these stations are real, physical things that report their weather data to different agencies. They are not magic, and they take time to report their data.",
                        "I learned about the NOAA's (National Oceanic and Atmospheric Administration) GSOD (Global Daily Summary of the Day) Dataset. This dataset contains over 13,000 stations all over the world that report their daily weather summaries.",
                        "They also have an easy-to-use API that I tried to use, but I kept noticing that the data would be a few days behind, if not more. This wouldn't work!",
                        "So I had to use the datasets directly! Look below at the GSOD Data Processor project for how I did that, it was fun!"
                    ]
                },
                {
                    "sectionHeader": "How?",
                    "text": [
                        "Anyway, this app is simple, and it was my first time using Blazor. I originally wrote it all as a Blazor Server app but rewrote it to use Blazor WASM and a .Net Web API.",
                        "When you search for a location, the app makes a request to the Google Maps Geocoding API in order to get the Latitude and Longitude. I then query my database, which is populated by my data processor, to get a group of nearby stations. I then do a little calculation to get the nearest station.",
                        "A lot of times, unfortunately, yesterday's weather data hasn't been posted by the station. In this case, I do the next best thing, and get whatever missing past day's forecast, which should be a decent approximate until the data comes in.",
                        "The result is the past 6 days of weather data, and I mark which ones are predictions and which are actuals."
                    ]
                },
                {
                    "sectionHeader": "With What?",
                    "text": [
                        "Blazor WASM, .Net 8 Web API",
                        "Google Maps API (Geocoding, Time Zone), Pirate Weather API, NOAA GSOD Dataset"
                    ]
                }
            ]
        },
        {
            "title": "GSOD Data Processor",
            "image": "static/GSOD.JPG",
            "imageAlt": "GSOD Data Processor",
            "links": [
                {
                    "label": "GitHub",
                    "url": "https://github.com/BunchieFarms/GSOD-DataProcessor"
                }
            ],
            "content": [
                {
                    "sectionHeader": "Why?",
                    "text": [
                        "If you read the word salad above for Weathered, you know the motivation for the project. But the reason I wanted to make this data processor was to solve a different problem and learn some new things.",
                        "The NOAA keeps the GSOD dataset on a public file share. Each station gets its own CSV file, named after each station's Station ID, and each row of that file is a different day of the year. There are over 13,000 stations at the time of writing, and each of those station's CSV files are placed in a folder named after the year the data was recorded in.",
                        "There are also GZipped Tar archives of each year of data, updated whenever updates come, I suppose. I need to get those and parse the CSVs for all that sweet, sweet data."
                    ]
                },
                {
                    "sectionHeader": "How?",
                    "text": [
                        "Every hour, my server has a cron job that runs this program. This program first parses the HTML data on the file share, and checks to see if the current year's GZipped Tar archive's update date/time is newer than the check from the last hour. If not, we're done!",
                        "If there is an updated file available, this program downloads that file, decompresses it, then parses through each CSV file in the archive. The data from, at latest, 8 days ago from each file gets put into memory. I then query the database for records that do not have yesterday's data and update what is available.",
                        "There are definitely performance improvements that can and should be made, but I just wanted to get this done fairly quickly. I want to optimize it as much as I can, then rewrite it in another language for fun."
                    ]
                },
                {
                    "sectionHeader": "With What?",
                    "text": [
                        ".Net 8.0, SharpZipLib, HtmlAgilityPack, TinyCsvParser, MongoDB"
                    ]
                }
            ]
        },
        {
            "title": "Targeted Homes",
            "image": "static/TH.JPG",
            "imageAlt": "Targeted Homes",
            "links": [
                {
                    "label": "Visit",
                    "url": "http://th.bryceohmer.com"
                },
                {
                    "label": "GitHub",
                    "url": "https://github.com/BunchieFarms/TargetedHomes"
                }
            ],
            "content": [
                {
                    "sectionHeader": "Why?",
                    "text": [
                        "My wife and I are planning on moving to a new house, and her only two location requirements are being somewhere in NC, and within 20 minutes of a Target store."
                    ]
                },
                {
                    "sectionHeader": "How?",
                    "text": [
                        "I have the locations of all the Targets in North Carolina in a database. On page load, we get all those locations and put them on the map.",
                        "When an address is entered in the search bar, we send that to my API, which sends a request to another API to geocode the address.",
                        "We are using the Google Maps Route Matrix API to get the nearest Target to that address. This API only supports 50 destination points, but there are 53 Targets in NC.",
                        "Make a circle Â±0.5 lat/lon around the starting point, and check if there are any Targets in this circle. Try that a few times, adding 1 degree lat/lon each time.",
                        "We'll probably get a few Targets in that circle, so get the one with the shortest driving duration, and send the encoded polyline, along with other route and address information back to client.",
                        "The client then draws the route on the map, showing the user the closest Target, the distance, and driving duration to it."
                    ]
                },
                {
                    "sectionHeader": "With What?",
                    "text": [
                        "Angular 17, .Net 7.0 Web API, PostgresQL database",
                        "Google Maps API (Maps, Geocoding, Routes)"
                    ]
                }
            ]
        },
        {
            "title": "Brunswick County Permit Portal / Virtual Inspections",
            "image": "static/bcpp.JPG",
            "imageAlt": "Brunswick County Permit Portal",
            "links": [
                {
                    "label": "NACo Award",
                    "url": "https://www.naco.org/resources/award-programs/brunswick-county-permit-portal"
                }
            ],
            "content": [
                {
                    "sectionHeader": "Why?",
                    "text": [
                        "This was a project I worked on while working for Brunswick County government. The goal was to improve the permitting and inspection experience for building contractors and internal permitting employees.",
                        "The result was enabling contractors to easily request permits and inspections, and allowing county employees to spend less time on the phone and more time processing permits.",
                        "This software also contained an application that enabled virtual inspection scheduling which helped keep people safe during Coronavirus pandemic."
                    ]
                },
                {
                    "sectionHeader": "How?",
                    "text": [
                        "The frontend was made with Angular 2+, and the server-side code was written with .Net Core with a GraphQL web API, all of which were new technologies for the county to use.",
                        "Like most web apps, it was really just a fancy front-end for a database.",
                        "This was my first production-level project, so I made many mistakes, but also learned many valuable lessons.",
                        "In retrospect it was a fairly simple application, but I am still proud of it, and it earned a NACo Achievement Award, so that is nice."
                    ]
                },
                {
                    "sectionHeader": "With What?",
                    "text": [
                        "Angular, .Net Core, SQL Server"
                    ]
                }
            ]
        },
        {
            "title": "BryceOhmer.com",
            "image": "static/bryceohmer.JPG",
            "imageAlt": "bryceohmer.com",
            "links": [
                {
                    "label": "Visit",
                    "url": "http://bryceohmer.com"
                },
                {
                    "label": "GitHub",
                    "url": "https://github.com/BunchieFarms/bryceohmer"
                }
            ],
            "content": [
                {
                    "sectionHeader": "Why?",
                    "text": [
                        "Everyone needs a website!"
                    ]
                },
                {
                    "sectionHeader": "How?",
                    "text": [
                        "I wanted to learn React and Next.JS, so I used React and Next.JS to create this static webpage.",
                        "Running 'npm run build' will create a static site, then I just transfer it to my VPS."
                    ]
                },
                {
                    "sectionHeader": "With What?",
                    "text": [
                        "React, Next.JS, Hosted on Ubuntu VPS with Nginx"
                    ]
                }
            ]
        }
    ]
}